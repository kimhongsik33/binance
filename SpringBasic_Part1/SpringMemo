DI
의존하는 객체에 대한 획득을 클래스에서 하지 않고 스프링 컨테이너가 주입(제공)해 준다.
다시 말하면, AA클래스에서 BB bb = new BB();를 사용하지 않고 스프링 컨테이너가
AA클래스를 생성할 때 만들어 놓은 BB클래스의 인스턴스(bean)를 주입 받는다.
설정은 xml을 통해서 이루어진다.

##인터페이스를 이용해 의존성을 낮춤

-----------------
  Service객체                       인터페이스
                  -------------->    DAO
  DAO dao                       -------------
                                   ^      ^
                                   ㅣ     ㅣ
-----------------                 aDAO  bDAO 
                                   객체   객체
    dao = new aDAO()
    dao = new bDAO()

위의 그림은 의존성이 낮아진다.
코드의 변경없이 xml의 설정만으로 개발자가 원하는 객체의 주입으로 바꿀 수 있음.



##의존성 주입 종류
1.Setter(설정 메소드)를 이용한 주입
  : 설정 메소드를 사용해서 의존성을 주입하는 것
2.Constructor(생성자)를 이용한 주입
  : 생성자를 사용해서 의존성을 주입하는 것

##의존성 주입(DI)의 장점
DI를 사용하면 개발 계획시에 시간이 요구되지만 , 규모가 큰 프로젝트에서 유지보수 업무를 
한다면 DI개발의 장점을 느낄 수 있다.  

##의존관계 설정 방법
1. XML파일을 이용한 설정방법
2. XML과 JAVA를 혼용해서 사용하는 방법   12강
  : 어노테이션(Metadata)을 이용한다. 
    -jdk5부터 등장한 개념  
     ex)@Override
        어노테이션은
    - 컴파일러에게 정보를 알려주거나
    - 컴파일 할 때와 설치시 작업을 지정하거나
    - 실행할 때 별도의 처리가 필요한 경우
        사용한다.
       클래스, 변수, 메소드 등 모든 요소에 선언이 가능하다.
   
   # @Configuration : 클래스앞에 선언. "이 클래스는 스프링 설정에 사용되는 클래스입니다." 라고 알려주는 어노테이션
   # @Bean : 메소드 앞에 선언, "객체를 생성"
   
   
 ##XML과 JAVA를 혼용해서 사용하는 방법
  :XML파일과 JAVA파일을 같이 사용해서 스프링을 설정하는 방법

  　●com.test.diEx08
  　　→XML파일(baseBall3.xml)에서 JAVA파일(ConfigApp.java)를 불어오는 패턴
  　　→XML파일(baseBall3.xml)에[<context:annotation-config />]를 지정해서 자바파일의 config파일을 사용하겠다고 지정한다.
                   그후 <bean class="com.test.diEx08.ConfigApp" />를 지정함으로써 자바파일에 지정되어 있는 @Configuration
                  의 클래스를 XML에서 사용할수 있도록한다.
                
  　●com.test.diEx09
  　　→JAVA파일(ConfigApp.java)에서 XML을 불러오는 패턴
  　　→XML데이터를 가져올 때 자바 파일의 클래스 위에 [@ImportResource("classpath:baseBall4.xml")]
                   를 지정해서 XML데이터를 가져올 수 있도록 한다.
  
 
 ## 스프링 컨테이너 생명 주기
 
 　스프링 컨테이너 생성 : ~~ = new GenericXmlApplicationContext();
  　　→설정        : ctx.load("classpath:~~~.xml");
                 ctx.refresh();
  　　→사용        : Player player = ctx.getBean("player", Player.class);
  　　→종료        : ctx.close();
 
## 빈의 라이프 사이클
 ctx.refresh() 과정에서 빈이 생성
 ctx.close() 컨테이너가 소멸하는 단계에서 빈도 소멸
 
 InitializingBean 인터페이스
 	public void afterPropertiesSet() throws Exception
 	
 DisposableBean 인터페이스
 	public void destroy() throws Exception
 	
 InitializingBean, DisposableBean 인터페이스는 따로 구현해도 되고, 동시에 구현해도 된다.
 
 
	#어노테이션을 활용한 처리
 	@PostConstructor
 		public void initMethod(){}
 	
 	@PreDestroy
 		public void destroyMethod(){}
 		
## Chapter1-15. 빈의 범위(scope)
## 빈의 범위
 
 범위는 해당하는 객체가 어디까지 영향을 미치는지 결정하는 것
 <bean>태그의 속성 값 : default값은 singleton
 singleton : 스프링 컨테이너에 의해 한개의 빈 객체만 생성
 prototype : 빈을 사용할 때 마다 객체를 생성
 request : HTTP요청마다 빈 객체를 생성 (WebApplicationContext에서만 적용)
 session : HTTP세션마다 빈 객체를 생성 (WebApplicationContext에서만 적용)
 global-session : global HTTP 세션에 대해 빈 객체를 생성
 

 ## Chapter1-16. 사용자 초기화 메소드 및 사용자 소멸 메소드 설정하기
 
 :객체의 생성과 소멸시에 특정 메소드를 실행시키고 싶을 때 사용한다.
  init-method : 커스텀 초기화 메소드를 지정하는 <bean>태그의 속성
  destroy-method : 커스텀 소멸 메소드를 지정하는 <bean>태그의 속성
  
 # BeanNameAware 인터페이스
 : 빈 객체가 자기자신의 이름을 알아야 할 경우 사용된다.
 : 클래스가 BeanNameAware 인터페이스를 구현한 경우 컨테이너는 setBeanName()메소드를 호출해서 빈 객체의 이름을 전달.
 : setBeanName(String arg) : 객체가 생성될 때 해당객체의 id나 name값을 전달 받는 메서드
 

## Chapter1-17. Environment를 이용한 빈 설정
 : EnvironmentAware인터페이스를 활용해서 Environment객체를 얻는다.
 : 외부 파일을 이용한 빈 설정.
  - Environment인터페이스를 활용
   > Context객체 --> getEnvironment() --> Environment객체 얻기
   > Environment객체 --> getPropertySources객체 얻기
   > PropertySources객체 --> 프로퍼티를 추가(addLast)하거나 추출(getProperty) 작업을 한다.  